version: "3"
services:

  frontend:
    image: pytemplates_frontend:latest
    build: ./
    restart: always
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
    command:
      - --workers=2
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1500M
        reservations:
          cpus: '1'
          memory: 1500M
      restart_policy:
        condition: on-failure
      labels:
        # Expose the service to the traefik proxy
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        # Define the port inside of the Docker service to use
        - traefik.http.services.frontend.loadbalancer.server.port=80
        # Make Traefik use this domain in HTTP
        - traefik.http.routers.frontend-http.entrypoints=http
        - traefik.http.routers.frontend-http.rule=Host(`pytemplates.gallery`)
        # Make Traefik use this domain in HTTPS
        - traefik.http.routers.frontend-https.entrypoints=https
        - traefik.http.routers.frontend-https.rule=Host(`pytemplates.gallery`)
        - traefik.http.routers.frontend-https.tls=true
        # Use the "le" (Let's Encrypt) resolver
        - traefik.http.routers.frontend-https.tls.certresolver=le
        # https-redirect middleware to redirect HTTP to HTTPS
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        - traefik.http.routers.frontend-http.middlewares=https-redirect

networks:
  traefik-public:
    external: true
